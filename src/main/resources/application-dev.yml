
spring:
  jackson:
    default-property-inclusion: non_null #属性为NULL不序列化
    date-format: yyyy-MM-dd hh:mm:ss
  datasource:
    url: jdbc:mysql://192.168.56.102:3306/spring_session?&zeroDateTimeBehavior=convertToNull
    username: wind
    password: wind
    druid:
      initial-size: 1 #指定启动连接池时，初始建立的连接数量
      min-idle: 1 #指定必须保持连接的最小值
      max-active: 20 #指定连接池中最大的活跃连接数.
      max-wait: 60000 #指定连接池等待连接返回的最大等待时间，毫秒单位
      pool-prepared-statements: false #指定是否池化statements
      max-pool-prepared-statement-per-connection-size: 20
      validation-query: SELECT 1 #指定获取连接时连接校验的sql查询语句.
      validation-query-timeout: 60000
      test-on-borrow: false #当从连接池借用连接时，是否测试该连接.
      test-on-return: false #在连接归还到连接池时是否测试该连接.
      test-while-idle: true #当连接空闲时，是否执行连接测试.
      time-between-eviction-runs-millis: 60000 #指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔
      min-evictable-idle-time-millis: 30000 #指定一个空闲连接最少空闲多久后可被清除.
      max-evictable-idle-time-millis: 60000
      filters: stat, wall
      filter:
        stat:
          db-type: mysql
          log-slow-sql: true
          slow-sql-millis: 10000
          merge-sql: true
        wall:
          enabled: true
          db-type: mysql
          config:
            delete-allow: true
            drop-table-allow: false
#  quartz:
#    properties:
#      org:
#        quartz:
#          scheduler:
#            #调度标识名 集群中每一个实例都必须使用相同的名称
#            instanceName: clusteredScheduler
#            #ID设置为自动获取 每一个必须不同
#            instanceId: AUTO
#          jobStore:
#            #数据保存方式为数据库持久化
#            class: org.quartz.impl.jdbcjobstore.JobStoreTX
#            #数据库代理类，一般org.quartz.impl.jdbcjobstore.StdJDBCDelegate可以满足大部分数据库, MySQL数据库
#            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#            #表的前缀，默认QRTZ_
#            tablePrefix: QRTZ_
#            #是否加入集群
#            isClustered: true
#            #调度实例失效的检查时间间隔
#            clusterCheckinInterval: 10000
#            #JobDataMaps是否都为String类型
#            useProperties: false
#            #数据库别名 随便取
#            #dataSource: QUARTZ
#          threadPool:
#            #线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求)
#            class: org.quartz.simpl.SimpleThreadPool
#            #指定线程数，至少为1（无默认值）(一般设置为1-100直接的整数合适)
#            threadCount: 10
#            #设置线程的优先级(最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5)
#            threadPriority: 5
#            #配置是否启动自动加载数据库内的定时任务，默认true
#            threadsInheritContextClassLoaderOfInitializingThread: true
##          dataSource:
##            quartz:
##              driver: com.mysql.jdbc.Driver
##              #数据库连接
##              url: jdbc:mysql://192.168.56.102:3306/QUARTZ?useUnicode=true&characterEncoding=UTF-8
##              #数据库用户
##              user: sun
##              #数据库密码
##              password: sun
##              #允许最大连接
##              maxConnections: 5
##              #验证查询sql,可以不设置
##              validationQuery: select 1
#    job-store-type: jdbc


  redis:
    password: redisCluster
    cluster:
      nodes: 192.168.56.102:7001,192.168.56.102:7002,192.168.56.102:7003,192.168.56.102:7004,192.168.56.102:7005,192.168.56.102:7006


#  rabbitmq:
#    host: 127.0.0.1
#    port: 5672
#    username: guest
#    password: guest
#      #开启消息发送确认
#    publisher-confirms: true
#    publisher-returns: true
#    listener:
#      direct:
#        acknowledge-mode: manual
#      simple:
#        acknowledge-mode: manual
#    template:
#      #返回无法插入队列的消息
#      mandatory: true


logging:
  path: /var/log/spring-session
  file:
    max-size: 10MB
    max-history: 0
  pattern:
    dateformat: yyyy-MM-dd HH:mm:ss:SSS
  level:
    com.sun.springsession.dao: debug

server:
  protocol: "http:"
  protocolSeparator: //
  ip: 192.168.56.102
  domain: www.sun.com
  allowCORS: true

  fileServer:
    dir: /var/www
    user:
      avatar:
        dir: /user/headPortrait
        maxSize: 2048000 #KB

  port: 8085

mybatis:
  mapper-locations: classpath:mapper/*Mapper.xml
  configuration:
    map-underscore-to-camel-case: true


#apache:
#  rocketmq:
#    consumer:
#      PushConsumer: PushConsumer
#    producer:
#      producerGroup: Producer
#    namesrvAddr: localhost:9876
